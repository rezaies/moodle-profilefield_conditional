{"version":3,"file":"conditionconfig.min.js","sources":["../src/conditionconfig.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Handle opening a dialogue to configure condition data.\n *\n * @module     profilefield_conditional/conditionconfig\n * @copyright  2016 Shamim Rezaie <http://foodle.org>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\ndefine(['jquery', 'core/notification', 'core/templates', 'core/ajax',\n        'profilefield_conditional/dialogue', 'profilefield_conditional/otherfields'],\n    function($, notification, templates, ajax, Dialogue, ModOtherFields) {\n\n        /**\n         * Condition config object.\n         * @param {String} selectSelector The select box selector.\n         * @param {String} inputSelector The hidden input field selector.\n         * @param {String} triggerSelector The trigger selector.\n         * @param {Number} fieldId Current field's ID.\n         */\n        var ConditionConfig = function(selectSelector, inputSelector, triggerSelector, fieldId) {\n            this.selectSelector = selectSelector;\n            this.inputSelector = inputSelector;\n            this.triggerSelector = triggerSelector;\n            this.fieldId = fieldId;\n\n            $(triggerSelector).click(this.showConfig.bind(this));\n        };\n\n        /** @var {String} The select box selector. */\n        ConditionConfig.prototype.selectSelector = null;\n        /** @var {String} The hidden field selector. */\n        ConditionConfig.prototype.inputSelector = null;\n        /** @var {String} The trigger selector. */\n        ConditionConfig.prototype.triggerSelector = null;\n        /** @var {Number} fieldId Field ID. */\n        ConditionConfig.prototype.fieldId = null;\n        /** @var {Array} otherFields ID and name of the scales. */\n        ConditionConfig.prototype.otherFields = null;\n        /** @var {Array} options Menu options. */\n        ConditionConfig.prototype.options = null;\n        /** @var {Dialogue} Reference to the popup. */\n        ConditionConfig.prototype.popup = null;\n\n        /**\n         * Displays the condition configuration dialogue.\n         *\n         * @method showConfig\n         */\n        ConditionConfig.prototype.showConfig = function() {\n            var self = this;\n\n            this.options = [];\n            $(this.selectSelector).val().replace(/\\r\\n/, '\\n').split('\\n').forEach(function(value, index) {\n                if (value) {\n                    self.options.push({index: index, option: value});\n                }\n            });\n\n            this.getOtherFields(this.fieldId).done(function() {\n\n                var context = {\n                    options: self.options,\n                    fields: self.otherFields\n                };\n\n                // Dish up the form.\n                templates.render('profilefield_conditional/condition_configuration_page', context)\n                    .done(function(html) {\n                        new Dialogue(\n                            '',\n                            html,\n                            self.initConditionConfig.bind(self)\n                        );\n                    }).fail(notification.exception);\n            }).fail(notification.exception);\n        };\n\n        /**\n         * Gets the condition configuration if it was set.\n         *\n         * @method retrieveConditionConfig\n         * @return {Object|String} condition configuration or empty string.\n         */\n        ConditionConfig.prototype.retrieveConditionConfig = function() {\n            var jsonstring = $(this.inputSelector).val();\n            if (jsonstring !== '') {\n                return $.parseJSON(jsonstring);\n            }\n            return '';\n        };\n\n        ConditionConfig.prototype.applyRestriction = function(source) {\n            if (source.closest('.profilefield_conditional_config')) {\n                source.parentElement.parentElement.querySelectorAll('[type=\"checkbox\"]').forEach(checkbox => {\n                    if (checkbox !== source) {\n                        if (source.checked) {\n                            checkbox.checked = false;\n                            checkbox.disabled = true;\n                        } else {\n                            checkbox.disabled = false;\n                        }\n                    }\n                });\n            }\n        };\n\n        /**\n         * Initialises the condition configuration dialogue.\n         *\n         * @method initConditionConfig\n         * @param {Dialogue} popup Dialogue object to initialise.\n         */\n        ConditionConfig.prototype.initConditionConfig = function(popup) {\n            this.popup = popup;\n            var self = this;\n            var body = $(popup.getContent());\n            // Set up the popup to show the current configuration.\n            var currentconfig = this.retrieveConditionConfig();\n            // Set up the form only if there is configuration settings to set.\n            if (currentconfig !== '') {\n                currentconfig.forEach(function(option) {\n                    var slashedoption = option.option\n                            .replace(/\\\\/g, '\\\\\\\\')\n                            .replace(/'/g, '\\\\\\'')\n                            .replace(/\"/g, '\\\\\"')\n                            .replace(/\\0/g, '\\\\0');\n                    option.requiredfields.forEach(function(field) {\n                        body.find('[data-field=\"profilefield_conditional_field_required_' + slashedoption + '_' + field + '\"]')\n                                .attr('checked', true);\n                        body.find('[data-field=\"profilefield_conditional_field_required_' + slashedoption + '_' + field + '\"]')\n                            .each(\n                                function() {\n                                    self.applyRestriction(this);\n                                }\n                            );\n                    });\n                    option.hiddenfields.forEach(function(field) {\n                        body.find('[data-field=\"profilefield_conditional_field_hidden_' + slashedoption + '_' + field + '\"]')\n                                .attr('checked', true);\n                        body.find('[data-field=\"profilefield_conditional_field_hidden_' + slashedoption + '_' + field + '\"]').each(\n                            function() {\n                                self.applyRestriction(this);\n                            }\n                        );\n                    });\n                    if (option.hiddenclearedfields) {\n                        option.hiddenclearedfields.forEach(function(field) {\n                            body.find(`[data-field=\"profilefield_conditional_field_hiddencleared_${slashedoption}_${field}\"]`)\n                                .attr('checked', true);\n                            body.find(`[data-field=\"profilefield_conditional_field_hiddencleared_${slashedoption}_${field}\"]`)\n                                .each(\n                                    function() {\n                                        self.applyRestriction(this);\n                                    }\n                                );\n                        });\n                    }\n                });\n            }\n            body.on('click', '[data-action=\"close\"]', function() {\n                this.setConditionConfig();\n                popup.close();\n            }.bind(this));\n            body.on('click', '[data-action=\"cancel\"]', function() {\n                popup.close();\n            });\n            body.on('click', '[type=\"checkbox\"]', function(e) {\n                this.applyRestriction(e.target);\n            }.bind(this));\n        };\n\n        /**\n         * Set the condition configuration back into a JSON string in the hidden element.\n         *\n         * @method setConditionConfig\n         */\n        ConditionConfig.prototype.setConditionConfig = function() {\n            var self = this;\n            var body = $(this.popup.getContent());\n            // Get the data.\n            var data = [];\n            this.options.forEach(function(option) {\n                var requiredfields = [];\n                var hiddenfields = [];\n                var hiddenclearedfields = [];\n                var slashedoption = option.option\n                        .replace(/\\\\/g, '\\\\\\\\')\n                        .replace(/'/g, '\\\\\\'')\n                        .replace(/\"/g, '\\\\\"')\n                        .replace(/\\0/g, '\\\\0');\n                self.otherFields.forEach(function(field) {\n                    if (body.find(\n                        '[data-field=\"profilefield_conditional_field_required_' + slashedoption + '_' + field.shortname + '\"]'\n                    ).is(':checked')) {\n                        requiredfields.push(field.shortname);\n                    }\n                    if (body.find(\n                        '[data-field=\"profilefield_conditional_field_hidden_' + slashedoption + '_' + field.shortname + '\"]'\n                    ).is(':checked')) {\n                        hiddenfields.push(field.shortname);\n                    }\n                    if (body.find(\n                        '[data-field=\"profilefield_conditional_field_hiddencleared_' + slashedoption + '_' + field.shortname + '\"]'\n                    ).is(':checked')) {\n                        hiddenclearedfields.push(field.shortname);\n                    }\n                });\n                data.push({\n                    option: option.option,\n                    requiredfields: requiredfields,\n                    hiddenfields: hiddenfields,\n                    hiddenclearedfields: hiddenclearedfields,\n                });\n            });\n            var datastring = JSON.stringify(data);\n            // Send to the hidden field on the form.\n            $(this.inputSelector).val(datastring);\n        };\n\n        /**\n         * Get all existing custom profile fields except the current field.\n         *\n         * @method getOtherFields\n         * @param {Number} fieldId The id of current field.\n         * @return {Promise} A deffered object with field information.\n         */\n        ConditionConfig.prototype.getOtherFields = function(fieldId) {\n            return ModOtherFields.getFields(fieldId).then(function(values) {\n                this.otherFields = values;\n                return values;\n            }.bind(this));\n        };\n\n        return {\n\n            /**\n             * Main initialisation.\n             *\n             * @param {String} selectSelector The select box selector.\n             * @param {String} inputSelector The hidden input field selector.\n             * @param {String} triggerSelector The trigger selector.\n             * @param {Number} fieldId The current fieldid.\n             * @return {ConditionConfig} A new instance of ConditionConfig.\n             * @method init\n             */\n            init: function(selectSelector, inputSelector, triggerSelector, fieldId) {\n                return new ConditionConfig(selectSelector, inputSelector, triggerSelector, fieldId);\n            }\n        };\n    }\n);\n"],"names":["define","$","notification","templates","ajax","Dialogue","ModOtherFields","ConditionConfig","selectSelector","inputSelector","triggerSelector","fieldId","click","this","showConfig","bind","prototype","otherFields","options","popup","self","val","replace","split","forEach","value","index","push","option","getOtherFields","done","context","fields","render","html","initConditionConfig","fail","exception","retrieveConditionConfig","jsonstring","parseJSON","applyRestriction","source","closest","parentElement","querySelectorAll","checkbox","checked","disabled","body","getContent","currentconfig","slashedoption","requiredfields","field","find","attr","each","hiddenfields","hiddenclearedfields","on","setConditionConfig","close","e","target","data","shortname","is","datastring","JSON","stringify","getFields","then","values","init"],"mappings":"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"}