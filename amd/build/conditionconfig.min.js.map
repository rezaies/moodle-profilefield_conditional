{"version":3,"file":"conditionconfig.min.js","sources":["../src/conditionconfig.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Handle opening a dialogue to configure condition data.\n *\n * @module     profilefield_conditional/conditionconfig\n * @copyright  2016 Shamim Rezaie <http://foodle.org>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\ndefine(['jquery', 'core/notification', 'core/templates', 'core/ajax',\n        'profilefield_conditional/dialogue', 'profilefield_conditional/otherfields'],\n    function($, notification, templates, ajax, Dialogue, ModOtherFields) {\n\n        /**\n         * Condition config object.\n         * @param {String} selectSelector The select box selector.\n         * @param {String} inputSelector The hidden input field selector.\n         * @param {String} triggerSelector The trigger selector.\n         * @param {Number} fieldId Current field's ID.\n         */\n        var ConditionConfig = function(selectSelector, inputSelector, triggerSelector, fieldId) {\n            this.selectSelector = selectSelector;\n            this.inputSelector = inputSelector;\n            this.triggerSelector = triggerSelector;\n            this.fieldId = fieldId;\n\n            $(triggerSelector).click(this.showConfig.bind(this));\n        };\n\n        /** @var {String} The select box selector. */\n        ConditionConfig.prototype.selectSelector = null;\n        /** @var {String} The hidden field selector. */\n        ConditionConfig.prototype.inputSelector = null;\n        /** @var {String} The trigger selector. */\n        ConditionConfig.prototype.triggerSelector = null;\n        /** @var {Number} fieldId Field ID. */\n        ConditionConfig.prototype.fieldId = null;\n        /** @var {Array} otherFields ID and name of the scales. */\n        ConditionConfig.prototype.otherFields = null;\n        /** @var {Array} options Menu options. */\n        ConditionConfig.prototype.options = null;\n        /** @var {Dialogue} Reference to the popup. */\n        ConditionConfig.prototype.popup = null;\n\n        /**\n         * Displays the condition configuration dialogue.\n         *\n         * @method showConfig\n         */\n        ConditionConfig.prototype.showConfig = function() {\n            var self = this;\n\n            this.options = [];\n            $(this.selectSelector).val().replace(/\\r\\n/, '\\n').split('\\n').forEach(function(value, index) {\n                if (value) {\n                    self.options.push({index: index, option: value});\n                }\n            });\n\n            this.getOtherFields(this.fieldId).done(function() {\n\n                var context = {\n                    options: self.options,\n                    fields: self.otherFields\n                };\n\n                // Dish up the form.\n                templates.render('profilefield_conditional/condition_configuration_page', context)\n                    .done(function(html) {\n                        new Dialogue(\n                            '',\n                            html,\n                            self.initConditionConfig.bind(self)\n                        );\n                    }).fail(notification.exception);\n            }).fail(notification.exception);\n        };\n\n        /**\n         * Gets the condition configuration if it was set.\n         *\n         * @method retrieveConditionConfig\n         * @return {Object|String} condition configuration or empty string.\n         */\n        ConditionConfig.prototype.retrieveConditionConfig = function() {\n            var jsonstring = $(this.inputSelector).val();\n            if (jsonstring !== '') {\n                return $.parseJSON(jsonstring);\n            }\n            return '';\n        };\n\n        ConditionConfig.prototype.applyRestriction = function(source) {\n            var sourceid = source.id;\n            var sourceatt = $(source).attr('data-field');\n            var targetatt = '';\n            var targetid = '';\n\n            if ($(source).hasClass('profilefield_conditional_field_required')) {\n                targetatt = sourceatt.replace('profilefield_conditional_field_required_', 'profilefield_conditional_field_hidden_');\n                targetid = sourceid.replace('required_', 'hidden_');\n            } else if ($(source).hasClass('profilefield_conditional_field_hidden')) {\n                targetatt = sourceatt.replace('profilefield_conditional_field_hidden_', 'profilefield_conditional_field_required_');\n                targetid = sourceid.replace('hidden_', 'required_');\n            }\n\n            if (targetid === '' || targetid == sourceid) {\n                return;\n            }\n\n            var slashedtargetatt = targetatt\n                    .replace(/\\\\/g, '\\\\\\\\')\n                    .replace(/'/g, '\\\\\\'')\n                    .replace(/\"/g, '\\\\\"')\n                    .replace(/\\0/g, '\\\\0');\n\n            if ($(source).is(':checked')) {\n                $(source).parent().parent().find('[data-field=\"' + slashedtargetatt + '\"]').attr('checked', false);\n                $(source).parent().parent().find('[data-field=\"' + slashedtargetatt + '\"]').prop('disabled', true);\n            } else {\n                $(source).parent().parent().find('[data-field=\"' + slashedtargetatt + '\"]').prop('disabled', false);\n            }\n        };\n\n        /**\n         * Initialises the condition configuration dialogue.\n         *\n         * @method initConditionConfig\n         * @param {Dialogue} popup Dialogue object to initialise.\n         */\n        ConditionConfig.prototype.initConditionConfig = function(popup) {\n            this.popup = popup;\n            var self = this;\n            var body = $(popup.getContent());\n            // Set up the popup to show the current configuration.\n            var currentconfig = this.retrieveConditionConfig();\n            // Set up the form only if there is configuration settings to set.\n            if (currentconfig !== '') {\n                currentconfig.forEach(function(option) {\n                    var slashedoption = option.option\n                            .replace(/\\\\/g, '\\\\\\\\')\n                            .replace(/'/g, '\\\\\\'')\n                            .replace(/\"/g, '\\\\\"')\n                            .replace(/\\0/g, '\\\\0');\n                    option.requiredfields.forEach(function(field) {\n                        body.find('[data-field=\"profilefield_conditional_field_required_' + slashedoption + '_' + field + '\"]')\n                                .attr('checked', true);\n                        body.find('[data-field=\"profilefield_conditional_field_required_' + slashedoption + '_' + field + '\"]')\n                                .each(\n                            function() {\n                                self.applyRestriction(this);\n                            }\n                        );\n                    });\n                    option.hiddenfields.forEach(function(field) {\n                        body.find('[data-field=\"profilefield_conditional_field_hidden_' + slashedoption + '_' + field + '\"]')\n                                .attr('checked', true);\n                        body.find('[data-field=\"profilefield_conditional_field_hidden_' + slashedoption + '_' + field + '\"]').each(\n                            function() {\n                                self.applyRestriction(this);\n                            }\n                        );\n                    });\n                });\n            }\n            body.on('click', '[data-action=\"close\"]', function() {\n                this.setConditionConfig();\n                popup.close();\n            }.bind(this));\n            body.on('click', '[data-action=\"cancel\"]', function() {\n                popup.close();\n            });\n            body.on('click', '[type=\"checkbox\"]', function(e) {\n                this.applyRestriction(e.target);\n            }.bind(this));\n        };\n\n        /**\n         * Set the condition configuration back into a JSON string in the hidden element.\n         *\n         * @method setConditionConfig\n         */\n        ConditionConfig.prototype.setConditionConfig = function() {\n            var self = this;\n            var body = $(this.popup.getContent());\n            // Get the data.\n            var data = [];\n            this.options.forEach(function(option) {\n                var requiredfields = [];\n                var hiddenfields = [];\n                var slashedoption = option.option\n                        .replace(/\\\\/g, '\\\\\\\\')\n                        .replace(/'/g, '\\\\\\'')\n                        .replace(/\"/g, '\\\\\"')\n                        .replace(/\\0/g, '\\\\0');\n                self.otherFields.forEach(function(field) {\n                    if (body.find(\n                            '[data-field=\"profilefield_conditional_field_required_' + slashedoption + '_' + field.shortname + '\"]'\n                            ).is(':checked')) {\n                        requiredfields.push(field.shortname);\n                    }\n                    if (body.find(\n                            '[data-field=\"profilefield_conditional_field_hidden_' + slashedoption + '_' + field.shortname + '\"]'\n                            ).is(':checked')) {\n                        hiddenfields.push(field.shortname);\n                    }\n                });\n                data.push({\n                    option: option.option,\n                    requiredfields: requiredfields,\n                    hiddenfields: hiddenfields\n                });\n            });\n            var datastring = JSON.stringify(data);\n            // Send to the hidden field on the form.\n            $(this.inputSelector).val(datastring);\n        };\n\n        /**\n         * Get all existing custom profile fields except the current field.\n         *\n         * @method getOtherFields\n         * @param {Number} fieldId The id of current field.\n         * @return {Promise} A deffered object with field information.\n         */\n        ConditionConfig.prototype.getOtherFields = function(fieldId) {\n            return ModOtherFields.getFields(fieldId).then(function(values) {\n                this.otherFields = values;\n                return values;\n            }.bind(this));\n        };\n\n        return {\n\n            /**\n             * Main initialisation.\n             *\n             * @param {String} selectSelector The select box selector.\n             * @param {String} inputSelector The hidden input field selector.\n             * @param {String} triggerSelector The trigger selector.\n             * @param {Number} fieldId The current fieldid.\n             * @return {ConditionConfig} A new instance of ConditionConfig.\n             * @method init\n             */\n            init: function(selectSelector, inputSelector, triggerSelector, fieldId) {\n                return new ConditionConfig(selectSelector, inputSelector, triggerSelector, fieldId);\n            }\n        };\n    }\n);\n"],"names":["define","$","notification","templates","ajax","Dialogue","ModOtherFields","ConditionConfig","selectSelector","inputSelector","triggerSelector","fieldId","click","this","showConfig","bind","prototype","otherFields","options","popup","self","val","replace","split","forEach","value","index","push","option","getOtherFields","done","context","fields","render","html","initConditionConfig","fail","exception","retrieveConditionConfig","jsonstring","parseJSON","applyRestriction","source","sourceid","id","sourceatt","attr","targetatt","targetid","hasClass","slashedtargetatt","is","parent","find","prop","body","getContent","currentconfig","slashedoption","requiredfields","field","each","hiddenfields","on","setConditionConfig","close","e","target","data","shortname","datastring","JSON","stringify","getFields","then","values","init"],"mappings":"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"}