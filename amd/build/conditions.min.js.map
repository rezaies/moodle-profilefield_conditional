{"version":3,"file":"conditions.min.js","sources":["../src/conditions.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Handles applying conditions.\n *\n * @module     profilefield_conditional/conditions\n * @copyright  2016 Shamim Rezaie <http://foodle.org>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\ndefine(['jquery'], function($) {\n\n    /**\n     * Get the jQuet object of the row that contains provided field.\n     *\n     * @param {String} field The name of a field.\n     * @return {jQuery} The form row that contains the field.\n     */\n    var getFieldRow = function(field) {\n        var fieldRow = $('#fitem_id_profile_field_' + field);\n        if (fieldRow.length === 0) { // Boost style.\n            fieldRow = $('.fitem [name=profile_field_' + field + '], .fitem [name^=profile_field_' + field + '\\\\[]')\n                    .closest('.fitem.row');\n        }\n        return fieldRow;\n    };\n\n    /**\n     * Condition object.\n     *\n     * @param {String} fieldName The conditional field name.\n     * @constructor\n     */\n    var Conditions = function(fieldName) {\n        this.fieldName = fieldName;\n        var conditionalField = $('#id_profile_field_' + fieldName);\n        this.conditions = conditionalField.data('conditions') || [];\n        var allElements = [];\n        this.conditions.forEach(function(option) {\n            option.hiddenfields.forEach(function(field) {\n                if ($.inArray(field, allElements) == -1) {\n                    allElements.push(field);\n                }\n            });\n            option.requiredfields.forEach(function(field) {\n                if ($.inArray(field, allElements) == -1) {\n                    allElements.push(field);\n                }\n            });\n        });\n\n        this.allElements = allElements;\n        this.reqHTML = conditionalField.data('reqHtml');\n\n        this.initReqStars();\n        this.toggleReqStars();\n        conditionalField.change(this.toggleReqStars.bind(this));\n    };\n\n    Conditions.prototype.fieldName = null;\n    Conditions.prototype.conditions = null;\n    Conditions.prototype.allElements = null;\n    /** @var {Array} options Menu options. */\n    Conditions.prototype.options = null;\n\n    /**\n     * Keep record of fields that are required when the conditional field is not set and add a required rule for this case.\n     */\n    Conditions.prototype.initReqStars = function() {\n        var initReqFields = [];\n\n        this.allElements.forEach(function(element) {\n            if ((getFieldRow(element).find('.fitemtitle .req').length !== 0) ||\n                    (getFieldRow(element).find('abbr.text-danger').length !== 0)) { // Support for Boost.\n                initReqFields.push(element);\n            }\n        });\n\n        this.conditions.push({'option': '', 'requiredfields': initReqFields});\n    };\n\n    /**\n     * Display stars for new required fields and remove stars for fields that are no longer required.\n     */\n    Conditions.prototype.toggleReqStars = function() {\n        var selectedValue = $('#id_profile_field_' + this.fieldName).val();\n        var reqHTML = this.reqHTML;\n        var allElements = this.allElements;\n        var requiredfields;\n        var fieldRow;\n        var node;\n        var oldStyle = null;\n\n        this.conditions.forEach(function(option) {\n            if (option.option == selectedValue) {\n                requiredfields = option.requiredfields;\n                allElements.forEach(function(element) {\n                    fieldRow = getFieldRow(element);\n                    if (oldStyle === null) {\n                        oldStyle = fieldRow.has('.float-sm-right').length;\n                    }\n                    if ($.inArray(element, requiredfields) != -1) {\n                        node = fieldRow.find('.text-danger');\n\n                        // The following check is required to prevent putting multiple asterisks.\n                        if (node.length === 0) {\n                            node = $(reqHTML).hide();\n                            if (oldStyle) {\n                                fieldRow.find('.float-sm-right').append(node);\n                            } else {\n                                fieldRow.find('.col-form-label .align-items-center').append(node);\n                            }\n                        }\n\n                        node.show();\n                    } else {\n                        fieldRow.find('.text-danger').hide(0, function() {\n                            // The following check is required to prevent removing asterisk when the selected item\n                            // is quickly changed.\n                            if ($.inArray(element, requiredfields) != -1) {\n                                getFieldRow(element).find('.text-danger').remove();\n                            }\n                        });\n                    }\n                });\n            }\n        });\n\n        this.reqHTML = reqHTML; // In case it is updated above as a result of Boost style compatibility.\n    };\n\n    return {\n\n        /**\n         * Main initialisation.\n         *\n         * @param {String} fieldName The conditional field name.\n         * @return {Conditions} A new instance of Conditions.\n         * @method init\n         */\n        apply: function(fieldName) {\n            return new Conditions(fieldName);\n        }\n    };\n});\n"],"names":["define","$","getFieldRow","field","fieldRow","length","closest","Conditions","fieldName","conditionalField","conditions","data","allElements","forEach","option","hiddenfields","inArray","push","requiredfields","reqHTML","initReqStars","toggleReqStars","change","this","bind","prototype","options","initReqFields","element","find","node","selectedValue","val","oldStyle","has","hide","append","show","remove","apply"],"mappings":";;;;;;;AAsBAA,6CAAO,CAAC,WAAW,SAASC,OAQpBC,YAAc,SAASC,WACnBC,SAAWH,EAAE,2BAA6BE,cACtB,IAApBC,SAASC,SACTD,SAAWH,EAAE,8BAAgCE,MAAQ,kCAAoCA,MAAQ,QACxFG,QAAQ,eAEdF,UASPG,WAAa,SAASC,gBACjBA,UAAYA,cACbC,iBAAmBR,EAAE,qBAAuBO,gBAC3CE,WAAaD,iBAAiBE,KAAK,eAAiB,OACrDC,YAAc,QACbF,WAAWG,SAAQ,SAASC,QAC7BA,OAAOC,aAAaF,SAAQ,SAASV,QACK,GAAlCF,EAAEe,QAAQb,MAAOS,cACjBA,YAAYK,KAAKd,UAGzBW,OAAOI,eAAeL,SAAQ,SAASV,QACG,GAAlCF,EAAEe,QAAQb,MAAOS,cACjBA,YAAYK,KAAKd,kBAKxBS,YAAcA,iBACdO,QAAUV,iBAAiBE,KAAK,gBAEhCS,oBACAC,iBACLZ,iBAAiBa,OAAOC,KAAKF,eAAeG,KAAKD,eAGrDhB,WAAWkB,UAAUjB,UAAY,KACjCD,WAAWkB,UAAUf,WAAa,KAClCH,WAAWkB,UAAUb,YAAc,KAEnCL,WAAWkB,UAAUC,QAAU,KAK/BnB,WAAWkB,UAAUL,aAAe,eAC5BO,cAAgB,QAEff,YAAYC,SAAQ,SAASe,SACgC,IAAzD1B,YAAY0B,SAASC,KAAK,oBAAoBxB,QACe,IAAzDH,YAAY0B,SAASC,KAAK,oBAAoBxB,QACnDsB,cAAcV,KAAKW,iBAItBlB,WAAWO,KAAK,QAAW,kBAAsBU,iBAM1DpB,WAAWkB,UAAUJ,eAAiB,eAI9BH,eACAd,SACA0B,KALAC,cAAgB9B,EAAE,qBAAuBsB,KAAKf,WAAWwB,MACzDb,QAAUI,KAAKJ,QACfP,YAAcW,KAAKX,YAInBqB,SAAW,UAEVvB,WAAWG,SAAQ,SAASC,QACzBA,OAAOA,QAAUiB,gBACjBb,eAAiBJ,OAAOI,eACxBN,YAAYC,SAAQ,SAASe,SACzBxB,SAAWF,YAAY0B,SACN,OAAbK,WACAA,SAAW7B,SAAS8B,IAAI,mBAAmB7B,SAEJ,GAAvCJ,EAAEe,QAAQY,QAASV,iBAIC,KAHpBY,KAAO1B,SAASyB,KAAK,iBAGZxB,SACLyB,KAAO7B,EAAEkB,SAASgB,OACdF,SACA7B,SAASyB,KAAK,mBAAmBO,OAAON,MAExC1B,SAASyB,KAAK,uCAAuCO,OAAON,OAIpEA,KAAKO,QAELjC,SAASyB,KAAK,gBAAgBM,KAAK,GAAG,YAGS,GAAvClC,EAAEe,QAAQY,QAASV,iBACnBhB,YAAY0B,SAASC,KAAK,gBAAgBS,wBAQ7DnB,QAAUA,SAGZ,CASHoB,MAAO,SAAS/B,kBACL,IAAID,WAAWC"}